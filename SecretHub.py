# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SecretHub
else:
    import _SecretHub

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Client(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SecretHub.Client_swiginit(self, _SecretHub.new_Client())
    __swig_destroy__ = _SecretHub.delete_Client

    def Read(self, path):
        return _SecretHub.Client_Read(self, path)

    def ReadString(self, path):
        return _SecretHub.Client_ReadString(self, path)

    def Resolve(self, path):
        return _SecretHub.Client_Resolve(self, path)

    def ResolveEnv(self):
        return _SecretHub.Client_ResolveEnv(self)

    def Exists(self, path):
        return _SecretHub.Client_Exists(self, path)

    def Remove(self, path):
        return _SecretHub.Client_Remove(self, path)

    def Write(self, path, secret):
        return _SecretHub.Client_Write(self, path, secret)

# Register Client in _SecretHub:
_SecretHub.Client_swigregister(Client)

class Secret(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SecretID = property(_SecretHub.Secret_SecretID_get)
    DirID = property(_SecretHub.Secret_DirID_get)
    RepoID = property(_SecretHub.Secret_RepoID_get)
    Name = property(_SecretHub.Secret_Name_get)
    BlindName = property(_SecretHub.Secret_BlindName_get)
    VersionCount = property(_SecretHub.Secret_VersionCount_get)
    LatestVersion = property(_SecretHub.Secret_LatestVersion_get)
    Status = property(_SecretHub.Secret_Status_get)
    CreatedAt = property(_SecretHub.Secret_CreatedAt_get)
    __swig_destroy__ = _SecretHub.delete_Secret

# Register Secret in _SecretHub:
_SecretHub.Secret_swigregister(Secret)

class SecretVersion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SecretVersionID = property(_SecretHub.SecretVersion_SecretVersionID_get)
    Secret = property(_SecretHub.SecretVersion_Secret_get)
    Version = property(_SecretHub.SecretVersion_Version_get)
    Data = property(_SecretHub.SecretVersion_Data_get)
    CreatedAt = property(_SecretHub.SecretVersion_CreatedAt_get)
    Status = property(_SecretHub.SecretVersion_Status_get)
    __swig_destroy__ = _SecretHub.delete_SecretVersion

# Register SecretVersion in _SecretHub:
_SecretHub.SecretVersion_swigregister(SecretVersion)


import os

def ExportEnv(self, env):
    for key, value in env.items():
        os.environ[key] = value
Client.ExportEnv = ExportEnv



