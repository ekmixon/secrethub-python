/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "secrethub_wrapper.go"

#include "stdint.h"
typedef long long cgoTime;
typedef char* uuid;

struct Secret {
	uuid SecretID;
	uuid DirID;
	uuid RepoID;
	char* Name;
	char* BlindName;
	int VersionCount;
	int LatestVersion;
	char* Status;
	cgoTime CreatedAt;
};

struct SecretVersion {
	uuid SecretVersionID;
	struct Secret Secret;
	int Version;
	char* Data;
	cgoTime CreatedAt;
	char* Status;
};

struct Client {
	uint64_t ID;
};
#include <stdbool.h>
#include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// new_Client creates a new Go client, stores it in the client map and
// returns a (C) client struct with the id of the Go client.
//
// This method is called by the Client constructor in the target language.

extern struct Client* new_Client(char** p0);

// delete_Client frees the memory occupied by the given client object and
// clears its corresponding entry in the map.
//
// This method is called by the client destructor (or) on garbage collection
// of the client object in the target language.

extern void delete_Client(struct Client* p0);

// Client_Read retrieves a secret by its path.

extern struct SecretVersion Client_Read(struct Client* p0, char* p1, char** p2);

// Client_ReadString retrieves a secret as a string.

extern char* Client_ReadString(struct Client* p0, char* p1, char** p2);

// Client_Resolve fetches the values of a secret from SecretHub, when the `ref` parameter
// has the format `secrethub://<path>`. Otherwise it returns `ref` unchanged, as an array of bytes.

extern char* Client_Resolve(struct Client* p0, char* p1, char** p2);

// Client_ResolveEnv takes a map of environment variables and replaces the values of those
// which store references of secrets in SecretHub (`secrethub://<path>`) with the value
// of the respective secret. The other entries in the map remain untouched.

extern char* Client_ResolveEnv(struct Client* p0, char** p1);

// Client_Exists checks if a secret exists at `path`.

extern bool Client_Exists(struct Client* p0, char* p1, char** p2);

// Client_Remove deletes the secret found at `path`, if it exists.

extern void Client_Remove(struct Client* p0, char* p1, char** p2);

// Client_Write writes a secret containing the contents of `secret` at `path`.

extern void Client_Write(struct Client* p0, char* p1, char* p2, char** p3);

#ifdef __cplusplus
}
#endif
